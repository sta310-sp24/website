{
  "hash": "02126ef33d4551ce0a769baa5185b93b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 11: Multilevel models\"\ndate: \"2024-02-21\"\nexecute: \n  warning: false\n  message: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(knitr)\nlibrary(patchwork)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmusic <- read_csv(\"data/musicdata.csv\") |>\n  mutate(orchestra = factor(if_else(instrument == \"orchestral instrument\", \n                                    1, 0)), \n         large_ensemble = factor(if_else(perform_type == \"Large Ensemble\", \n                                         1, 0))\n  )\n```\n:::\n\n\n## Part 1: Univariate EDA\n\nBelow are plots of the distribution of the response variable `na` for (1) individual performances and (2) aggregated by musician (`id`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data = music, aes(x = na)) + \n  geom_histogram(color = \"white\", binwidth = 2) + \n  labs(x = \"NA\", \n       title = \"Individual performances\")\n\np2 <- music |>\n  group_by(id) |>\n  summarise(mean_na = mean(na)) |>\n  ggplot(aes(x = mean_na)) + \n  geom_histogram(color = \"white\", binwidth = 2) + \n  labs(x = \"Average NA\",\n       title = \"Aggregated by musician\")\n\np1 + p2 + plot_annotation(title = \"Negative affect scores\")\n```\n\n::: {.cell-output-display}\n![](lec-11-multilevel_files/figure-html/univariate-1-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Ex 1\n\nHow are the plots similar? How do they differ?\n:::\n\n::: callout-note\n## Ex 2\n\nWhat are some advantages of each plot? What are some disadvantages?\n:::\n\n## Part 2: Bivariate EDA\n\n::: callout-note\n## Ex 3\n\nMake a single scatterplot of the negative affect versus number of previous performances (`previous`) using the individual observations. Use `geom_smooth()` to add a linear regression line to the plot.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code\n```\n:::\n\n\n::: callout-note\n## Ex 4\n\nMake a separate scatterplot of negative affect versus number of previous performances (`previous`) for each musician (`id`). Use `geom_smooth(method = \"lm\", se = FALSE)` to add a linear regression line to each plot.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code\n```\n:::\n\n\n::: callout-note\n## Ex 5\n\nHow are the plots similar? How do they differ?\n:::\n\n::: callout-note\n## Ex 6\n\nWhat are some advantages of each plot? What are some disadvantages?\n:::\n\n## Part 3: Level One Models\n\nCode to fit and display the Level One model for Observation 22 is below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmusic |>\n  filter(id == 22) |>\n  lm(na ~ large_ensemble, data = _) |>\n  tidy() |>\n  kable(digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|term            | estimate| std.error| statistic| p.value|\n|:---------------|--------:|---------:|---------:|-------:|\n|(Intercept)     |   24.500|      1.96|    12.503|   0.000|\n|large_ensemble1 |   -7.833|      2.53|    -3.097|   0.009|\n\n\n:::\n:::\n\n\nThe code below fits the Level One models to obtain the fitted slope, intercept, and $R^2$ value for each musician.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up tibble for fitted values\nmodel_stats <- tibble(slopes = rep(NA,37), \n               intercepts = rep(NA,37), \n               r.squared = rep(NA, 37))\n\nids <- music |> distinct(id) |> pull()\n\n# fit the model and score the releveant statistcs\nfor(i in 1:length(ids)){\nlevel_one_data <- music |>\n  filter(id == ids[i]) \n\n# check if more than one performance type \nnum_perform_types <- level_one_data |> \n  distinct(large_ensemble) |> \n  nrow() \n\nif(num_perform_types > 1){\n\nlevel_one_model <- lm(na ~ large_ensemble, \n                      data = level_one_data)\n\nlevel_one_model_tidy <- tidy(level_one_model)\n\nmodel_stats$slopes[i] <- level_one_model_tidy$estimate[2]\nmodel_stats$intercepts[i] <- level_one_model_tidy$estimate[1]\nmodel_stats$r.squared[i] <- glance(level_one_model)$r.squared\n}\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlevel_one_int <- ggplot(model_stats, aes(x = intercepts)) + \n  geom_histogram(color = \"white\", binwidth = 2) +\n  labs(x = \"\", \n       title = \"Fitted intercepts\", \n       subtitle = \"for 37 musicians\")\n\nlevel_one_slope <- ggplot(model_stats, aes(x = slopes)) + \n  geom_histogram(color = \"white\", binwidth = 2) +\n  labs(x = \"\", \n       title = \"Fitted slopes\", \n       subtitle = \"for 37 musicians\")\n\nlevel_one_int + level_one_slope\n```\n\n::: {.cell-output-display}\n![](lec-11-multilevel_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(model_stats, aes(x = r.squared)) + \n  geom_histogram(color = \"white\", binwidth = 0.05) +\n  labs(x = \"\", \n       title = \"Fitted R-squared values\", \n       subtitle = \"for 37 musicians\")\n```\n\n::: {.cell-output-display}\n![](lec-11-multilevel_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Part 4: Level Two Models\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a Level Two data set\nmusicians <- music |>\n  distinct(id, orchestra) |>\n  bind_cols(model_stats)\n```\n:::\n\n\n**Model for intercepts**\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- lm(intercepts ~ orchestra, data = musicians) \ntidy(a) |>\n  kable(digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |   15.706|     0.789|    19.919|   0.000|\n|orchestra1  |    2.205|     1.115|     1.978|   0.058|\n\n\n:::\n:::\n\n\n**Model for slopes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- lm(slopes ~ orchestra, data = musicians) \ntidy(b) |>\n  kable(digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |   -0.771|     0.851|    -0.906|   0.373|\n|orchestra1  |   -1.406|     1.203|    -1.168|   0.253|\n\n\n:::\n:::\n",
    "supporting": [
      "lec-11-multilevel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}